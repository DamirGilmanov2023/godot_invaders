[gd_scene load_steps=34 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://Node2D.gd" type="Script" id=2]
[ext_resource path="res://Sprite2.gd" type="Script" id=3]

[sub_resource type="VisualShaderNodeColorFunc" id=1]
function = 1

[sub_resource type="VisualShaderNodeTexture" id=2]
source = 2

[sub_resource type="VisualShader" id=3]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// ColorFunc:2
	vec3 n_out2p0;
	{
		vec3 c = n_out3p0;
		float r = (c.r * .393) + (c.g *.769) + (c.b * .189);
		float g = (c.r * .349) + (c.g *.686) + (c.b * .168);
		float b = (c.r * .272) + (c.g *.534) + (c.b * .131);
		n_out2p0 = vec3(r, g, b);
	}

// Output:0
	COLOR.rgb = n_out2p0;

}

void light() {
// Output:0

}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 760, 200 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 440, 220 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 160, 180 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[sub_resource type="VisualShaderNodeVectorOp" id=5]

[sub_resource type="VisualShaderNodeTexture" id=6]
source = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=7]

[sub_resource type="VisualShaderNodeScalarUniform" id=8]
uniform_name = "out_control"

[sub_resource type="VisualShader" id=9]
code = "shader_type canvas_item;
uniform float out_control;



void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// ScalarUniform:5
	float n_out5p0 = out_control;

// VectorCompose:4
	vec3 n_out4p0 = vec3(n_out5p0, n_out5p0, n_out5p0);

// VectorOp:2
	vec3 n_out2p0 = n_out3p0 + n_out4p0;

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -18.0399, -11.7316 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 820, 180 )
nodes/fragment/2/node = SubResource( 5 )
nodes/fragment/2/position = Vector2( 560, 140 )
nodes/fragment/3/node = SubResource( 6 )
nodes/fragment/3/position = Vector2( 260, 120 )
nodes/fragment/4/node = SubResource( 7 )
nodes/fragment/4/position = Vector2( 460, 360 )
nodes/fragment/5/node = SubResource( 8 )
nodes/fragment/5/position = Vector2( 120, 340 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 2, 0, 3, 1, 0, 1, 4, 0, 2, 1, 5, 0, 4, 0, 5, 0, 4, 1, 5, 0, 4, 2 )

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/out_control = 0.07

[sub_resource type="VisualShader" id=14]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Output:0

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 0, -95 )
mode = 1
flags/light_only = false
nodes/vertex/0/position = Vector2( 860, 80 )
nodes/fragment/0/position = Vector2( 540, 80 )

[sub_resource type="ShaderMaterial" id=15]
shader = SubResource( 14 )

[sub_resource type="VisualShader" id=16]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Output:0

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 0, -95 )
mode = 1
flags/light_only = false
nodes/vertex/0/position = Vector2( 740, 0 )

[sub_resource type="ShaderMaterial" id=17]
shader = SubResource( 16 )

[sub_resource type="Shader" id=18]
code = "shader_type canvas_item;
void fragment(){
	//COLOR=vec4(1.0,0.0,0.0,1.0);
	//COLOR=vec4(UV.x,0.0,0.0,1.0);
	//COLOR=vec4(0.0,UV.y,0.0,1.0);
	//COLOR=vec4(UV.x,UV.y,0.0,1.0);
	COLOR=vec4(UV.x,1.0-UV.y,0.5,1.0);
}"

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 18 )

[sub_resource type="Shader" id=20]
code = "shader_type canvas_item;
void fragment() {
    COLOR = texture(TEXTURE, UV);
	//COLOR.a=1.0-UV.x;
	//COLOR.r=UV.y;
	//COLOR.g=UV.y;
	//COLOR.b=UV.x;
	COLOR.a=abs(sin(TIME*0.5))+0.2;
}





"

[sub_resource type="ShaderMaterial" id=21]
shader = SubResource( 20 )

[sub_resource type="Shader" id=22]
code = "shader_type canvas_item;
void fragment() {
    COLOR = texture(TEXTURE, UV);
	//COLOR.a=max(0.2,UV.x-abs(cos(TIME*0.5)));
	COLOR.a=max(UV.x-sin(TIME*0.5),asin(TIME*0.5)-UV.x);
}"

[sub_resource type="ShaderMaterial" id=23]
shader = SubResource( 22 )

[sub_resource type="Shader" id=24]
code = "shader_type canvas_item;
void vertex() {
    //VERTEX.x += UV.x * 10.0;
	VERTEX.x += sin(UV.x * TIME) * 10.0;
	VERTEX.y += sin(UV.y * TIME) * 10.0;
}"

[sub_resource type="ShaderMaterial" id=25]
shader = SubResource( 24 )

[sub_resource type="Shader" id=26]
code = "shader_type canvas_item;

void fragment() {
    COLOR = texture(TEXTURE, UV);
    float avg = (COLOR.r + COLOR.g + COLOR.b) / 3.0;
    COLOR.rgb = vec3(avg);
}"

[sub_resource type="ShaderMaterial" id=27]
shader = SubResource( 26 )

[sub_resource type="Shader" id=28]
code = "shader_type canvas_item;

uniform float amplitude : hint_range(0, 10); // Амплитуда колебаний флага
uniform float frequency : hint_range(0, 5); // Частота колебаний флага

void vertex() {
    // Изменение позиций вершин на основе времени и параметров амплитуды и частоты
    VERTEX.y += sin(TIME * frequency) * amplitude;
}"

[sub_resource type="ShaderMaterial" id=29]
shader = SubResource( 28 )
shader_param/amplitude = 10.0
shader_param/frequency = 2.57

[sub_resource type="Shader" id=30]
code = "shader_type canvas_item;
uniform vec4 color_signal : hint_color = vec4 (1.0);
uniform float size : hint_range(0.0, 1.0, 0.01) = 0.2;
uniform float zoom : hint_range(0.0, 20, 1) = 8.0;
uniform float speed : hint_range(-10.0, 10.0, 1.0) = 1.0;
void fragment(){
	float d =length((UV-0.5)*2.0);
	float t = pow(smoothstep(0.9,0.2,d),0.35);
	// For rainbow effect, keep this line :
	//vec3 rainbow = 0.5 + 0.5*cos(TIME+UV.xyx+vec3(0,2,4));
	//vec4 color = vec4(rainbow.rgb,1.0);
	// For idle color, delete \"//\" below :
	vec4 color = vec4(color_signal.rgb,1.0);
	d = sin(zoom*d - speed*TIME);
	d = abs(d);
	d = size/d;
	color *= d*t;
	COLOR = vec4(color);
}"

[sub_resource type="ShaderMaterial" id=31]
shader = SubResource( 30 )
shader_param/color_signal = Color( 1, 1, 1, 1 )
shader_param/size = 0.3
shader_param/zoom = 4.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=32]
code = "shader_type canvas_item;

uniform float time : hint_range(0, 1); // Переменная для управления временем

void fragment() {
    // Радиус и центр окружности
    vec2 center = vec2(0.5, 0.5);
    float radius = 0.3;

    // Вычисляем угол в зависимости от времени
    float angle = time * 2.0 * 3.14159265359; // Полный оборот в радианах

    // Вычисляем координаты на окружности
    vec2 circle_position = center + vec2(radius * cos(angle), radius * sin(angle));

    // Устанавливаем цвет объекта
    COLOR = texture(TEXTURE, circle_position);
}"

[sub_resource type="ShaderMaterial" id=33]
shader = SubResource( 32 )
shader_param/time = null

[node name="Node2D" type="Node2D"]
script = ExtResource( 2 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 4 )
position = Vector2( 138, 110 )
scale = Vector2( 2.5, 2.40625 )
texture = ExtResource( 1 )

[node name="Sprite2" type="Sprite" parent="."]
material = SubResource( 10 )
position = Vector2( 312, 108 )
scale = Vector2( 2.34375, 2.30469 )
texture = ExtResource( 1 )
script = ExtResource( 3 )

[node name="Sprite3" type="Sprite" parent="."]
material = SubResource( 15 )
position = Vector2( 472, 108 )
scale = Vector2( 2.23438, 2.23438 )
texture = ExtResource( 1 )

[node name="Sprite4" type="Sprite" parent="."]
material = SubResource( 17 )
position = Vector2( 621, 108 )
scale = Vector2( 2.03125, 2.0625 )
texture = ExtResource( 1 )

[node name="Icon" type="Sprite" parent="."]
material = SubResource( 19 )
position = Vector2( 772, 104.5 )
scale = Vector2( 2.125, 2.14062 )
texture = ExtResource( 1 )

[node name="Icon2" type="Sprite" parent="."]
material = SubResource( 21 )
position = Vector2( 934, 106 )
scale = Vector2( 2.125, 2.14062 )
texture = ExtResource( 1 )

[node name="Icon3" type="Sprite" parent="."]
material = SubResource( 23 )
position = Vector2( 143.5, 273 )
scale = Vector2( 2.14062, 2.15625 )
texture = ExtResource( 1 )

[node name="Icon4" type="Sprite" parent="."]
material = SubResource( 25 )
position = Vector2( 314, 270 )
scale = Vector2( 2.14062, 2.15625 )
texture = ExtResource( 1 )

[node name="Icon5" type="Sprite" parent="."]
material = SubResource( 27 )
position = Vector2( 478, 272 )
scale = Vector2( 2.14062, 2.15625 )
texture = ExtResource( 1 )

[node name="Icon6" type="Sprite" parent="."]
material = SubResource( 29 )
position = Vector2( 643, 271 )
scale = Vector2( 2.14062, 2.15625 )
texture = ExtResource( 1 )

[node name="Icon7" type="Sprite" parent="."]
material = SubResource( 31 )
position = Vector2( 810, 268 )
scale = Vector2( 2.14062, 2.15625 )
texture = ExtResource( 1 )

[node name="Icon8" type="Sprite" parent="."]
material = SubResource( 33 )
position = Vector2( 947, 278 )
scale = Vector2( 2.14062, 2.15625 )
texture = ExtResource( 1 )
